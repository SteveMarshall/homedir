# github:etc/bash/prompt
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; -*-
#
#       Setup the prompt environment variables.


# github:etc/bash/defaults/10.prompt
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; -*-
#
#       Setup the default PS1-4 prompts, and things that are used in
#       the prompt templates.
#
#       See ~/share/home/bash-prompt.markdown for more.

# Truncate paths to a maximum of "five chars, ellipsis, five chars".
PWDN_MAX_WORD='11'

# Default prompt macros.
GIT_STATUS_FORMATTER='git_status_formatter'
         PROMPT_USER='${USER}@'
     PROMPT_USERCHAR='$'
         PROMPT_HOST='${hostname}'
       PROMPT_WINDOW='%ccscr${WINDOW}%cn '
        PS1_TEMPLATE='([window][user][host] %cy[pwd 2]%b%cc[git]%cn)[%%] '
  # PS1_TITLE_TEMPLATE='$(pwdn 2)'

declare -a git_status

# Setup variables indicating the current git status, for use in the formatter.
function get_git_status {
    unset -v git_status

    git_status[0]=''        # branch
    git_status[1]='0'       # clean
    git_status[2]='0'       # ahead
    git_status[3]='0'       # behind
    git_status[4]='0'       # diverged
    git_status[5]='0'       # untracked

    local status=$( git status 2>/dev/null )
    local    find_branch="On branch ([^${IFS}]*)"
    local     find_clean="nothing.* to commit"
    local  find_diverged="Your branch and (.*) have diverged"
    local    find_remote="Your branch is (.*) of"
    local find_untracked="Untracked files:"

    if [[ ${status} =~ ${find_branch} ]]; then
        git_status[0]="${BASH_REMATCH[1]}"

        [[ ! ${status} =~ ${find_clean} ]] \
            && git_status[1]=1
        [[ ${status} =~ ${find_untracked} ]] \
            && git_status[5]=1
        [[ ${status} =~ ${find_remote} ]] && {
            [[ ${BASH_REMATCH[1]} == "ahead" ]]     \
                && git_status[2]=1              \
                || git_status[3]=1
        }
        [[ ${status} =~ ${find_diverged} ]] \
            && git_status[4]=1

        return 0
    fi

    return 1
}

# A short string to indicate the status of the current git repository.
function git_status_formatter {
    get_git_status \
        || return

    local git_status_branch="${git_status[0]}"
    local git_status_symbol=':'

    [ "${git_status_branch}" = "master" ] \
        && git_status_branch=''

    # unclean repo is *
    [ "${git_status[1]}" != 0 ] \
        && git_status_symbol="${git_status_symbol}*"

    # untracked files is +
    [ "${git_status[5]}" != 0 ] \
        && git_status_symbol="${git_status_symbol}+"

    printf " %s%s"              \
        "$git_status_branch"    \
        "$git_status_symbol"
}

# Replace placeholders of the style [home] with their actual values.
function expand_prompt_template {
    local template="$1"
    local title="$2"

    # the title is only useful in xterm-compatible terminal types
    case $TERM in
        xterm*|rxvt*)
            if [ -n "$title" ]; then
                title="%T${title}%t"
                template="${title}${template}"
            fi
            ;;
    esac

    # [%] macro
    local char="${PROMPT_USERCHAR:=%}"
    [ `id -u` == '0' ] \
        && char="${PROMPT_ROOTCHAR:=#}"

    # [%%] macro
    local chardepth=$(
            echo "${PROMPT_SYMBOLS}${char}" | sed -e 's/\$/\\\\\$/g'
        )

    # [user] macro
    local user=''
    [ "$USER" != "$DEFAULT_USER" ] \
        && user="${PROMPT_USER:=${USER}}"

    # [host] macro
    local host="${PROMPT_HOST:=${HOST}}"

    # [domain] macro
    local domain="${PROMPT_DOMAIN:=${DOMAIN}}"

    # [window] macro
    local window=''
    [ "$WINDOW" != '' ] \
        && window="${PROMPT_WINDOW:=${WINDOW}}"

    echo "$template" | sed                          \
        -e "s/\[%\]/$char/g"                        \
        -e "s/\[%%\]/$chardepth/g"                  \
        -e "s/\[user\]/${user}/g"                   \
        -e "s/\[host\]/${host}/g"                   \
        -e "s/\[domain\]/${domain}/g"               \
        -e "s/\[window\]/${window}/g"               \
        -e 's/\[pwd \([0-9]\)\]/$(pwdn \1)/g'       \
        -e "s/\[git]/\$( $GIT_STATUS_FORMATTER )/g" \
        -e "s/%B/$pbold/g"                          \
        -e "s/%b/$pnobold/g"                        \
        -e "s/%I/$pitalic/g"                        \
        -e "s/%i/$pnoitalic/g"                      \
        -e "s/%U/$punder/g"                         \
        -e "s/%u/$pnounder/g"                       \
        -e "s/%R/$pinverse/g"                       \
        -e "s/%r/$pnoinverse/g"                     \
        -e "s/%S/$pstrike/g"                        \
        -e "s/%s/$pnostrike/g"                      \
        -e "s/%X/$preset/g"                         \
        -e "s/%T/$xtitlestart/g"                    \
        -e "s/%t/$xtitlefinish/g"                   \
        -e "s/%ck/$pblack/g"                        \
        -e "s/%cb/$pblue/g"                         \
        -e "s/%cr/$pred/g"                          \
        -e "s/%cm/$pmagenta/g"                      \
        -e "s/%cg/$pgreen/g"                        \
        -e "s/%cc/$pcyan/g"                         \
        -e "s/%cy/$pyellow/g"                       \
        -e "s/%cw/$pwhite/g"                        \
        -e "s/%cn/$pnormal/g"                       \
        -e "s/%Ck/$pbgblack/g"                      \
        -e "s/%Cb/$pbgblue/g"                       \
        -e "s/%Cr/$pbgred/g"                        \
        -e "s/%Cm/$pbgmagenta/g"                    \
        -e "s/%Cg/$pbggreen/g"                      \
        -e "s/%Cc/$pbgcyan/g"                       \
        -e "s/%Cy/$pbgyellow/g"                     \
        -e "s/%Cw/$pbgwhite/g"                      \
        -e "s/%Cn/$pbgnormal/g"
	}

# Allow for complex PS1 values to be set in a more succinct, readable fashion.
[ -n "$PS1_TEMPLATE" ] \
    && PS1=$( expand_prompt_template "$PS1_TEMPLATE" "$PS1_TITLE_TEMPLATE" )
[ -n "$PS2_TEMPLATE" ] \
    && PS2=$( expand_prompt_template "$PS2_TEMPLATE" )
[ -n "$PS3_TEMPLATE" ] \
    && PS3=$( expand_prompt_template "$PS3_TEMPLATE" )
[ -n "$PS4_TEMPLATE" ] \
    && PS4=$( expand_prompt_template "$PS4_TEMPLATE" )

# Add the current prompt symbol as a quick visual indicator of shell depth.
# export PROMPT_SYMBOLS - ???
[ `id -u` == '0' ]                                                  \
    && PROMPT_SYMBOLS="${PROMPT_SYMBOLS}${PROMPT_ROOTCHAR:=#}"      \
    || PROMPT_SYMBOLS="${PROMPT_SYMBOLS}${PROMPT_USERCHAR:=%}"
