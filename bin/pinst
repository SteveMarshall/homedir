#!/usr/bin/perl
# -*- Mode: Perl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-

use strict;
use warnings;

use Data::Dumper;

use FileHandle;
use Getopt::Std;
use Pod::Usage;
use Sys::Hostname;
use Term::ANSIColor;

   
my %opt;
my $ok_opts            = getopts( 'c:dfhn', \%opt );
my $DEFAULTS_FILE      =    $opt{'c'}
                         || $ENV{'PINST_DEFAULTS'} 
                         || "$ENV{'HOME'}/etc/ports";
my $DEPENDENCIES_CMD   = 'port deps';
my $INSTALLED_CMD      = 'port installed';
my $VARIANTS_CMD       = 'port variants';
my $INSTALL_CMD        = 'port install';
my $hostname           = defined $ENV{'HOST'} 
                           ? $ENV{'HOST'}
                           : hostname();
   $hostname          =~ s/\..*//;

my %installed_ports    = get_installed_ports();
my( $default_ports,
    @ports_order )     = get_default_ports();
my @ports              = @ARGV;


if ( !$ok_opts  or  defined $opt{'h'} ) {
    pod2usage();
}

if ( defined $opt{'d'} ) {
    @ports = @ports_order;
}

foreach my $port ( @ports ) {
    install_port( $port );
}
exit;



sub install_port {
    my $port      = shift;
    my $dependent = shift;
    
    return if defined $installed_ports{$port};
    
    foreach my $dependency ( get_port_dependencies( $port ) ) {
        install_port( $dependency, $port );
    }
    
    my @variants       = get_port_variants( $port );
    my $cannot_install =    ( 0 < $#variants )
                         && !defined $default_ports->{$port}
                         && !defined $opt{'f'};
    my $colour         = 'green';
    my $install_text;
    
    if ( defined $dependent ) {
        $install_text = "install $dependent dependency $port";
        $colour       = 'yellow';
    }
    else {
        $install_text = "install $port";
    }
    
    if ( $cannot_install ) {
        print colored "Cannot ${install_text} because it has variants:\n    ", 
                      'bold red';
        print join "\n    ", @variants;
        print "\n\n";
        exit( 1 )
            unless defined $opt{'n'};
    }

    print colored "About to ${install_text}:\n", "bold ${colour}";
    
    my $command = "${INSTALL_CMD} $port ";
    if ( defined $default_ports->{$port}  ) {
        $command .= join ' ', keys %{ $default_ports->{$port}{'variants'} };
    }
    
    if ( defined $opt{'n'} ) {
        print "**  $command\n";
    }
    else {
        my $return = system( $command );
        die if $return;
    }
    
    $installed_ports{$port}{'version'} = 'unknown';
    print "\n";
}
sub get_port_dependencies {
    my $port     = shift;
    my $variants = '';
    my @dependencies;

    if ( defined $default_ports->{$port} ) {
        $variants = join ' ', keys %{ $default_ports->{$port}{'variants'} };
    }

    my $handle = FileHandle->new( "${DEPENDENCIES_CMD} ${port} ${variants} |" )
                 or die "$!";
    
    LINE:
    while( my $line = <$handle> ) {
        if ( $line =~ m{ ^ [^\s]+ \s+ has }x ) {
            # ignore
        }
        elsif ( $line =~ m{ ( [^\s]+ ) }x ) {
            push @dependencies, $1;
        }
        else {
            die "Dependency error: $line";
        }
    }
    
    return @dependencies;
}
sub get_installed_ports {
    my %ports;
    my $installed_regexp = qr{ 
        ^
            [ ][ ]
            ( [^\s]+ )          # capture the port
            \s+
            [@]
            ( [\d\w._-]+ )      # capture the version
            (                   # capture any variants
                [+\w]+
            )*
            (?:                 # optional active tag
                \s+
                \(active\)
            )*
            \s*
        $
    }xs;
    my $handle = FileHandle->new( "${INSTALLED_CMD} |" )
                 or die "$!";

    # skip the first line - always an intro line
    <$handle>;
    
    while( my $line = <$handle> ) {
        if ( $line =~ $installed_regexp ) {
            my $port     = $1;
            my $version  = $2;
            my $variants = $3;
            
            $ports{$port}{'version'} = $version;

            if ( defined $variants ) {
                my @variants = split /\+/, $variants;
                shift @variants;
                
                foreach my $variant ( @variants ) {
                    $ports{$port}{'variants'}{$variant}= 1;
                }
            }
        }
        else {
            die "UNMATCHED: $line";
        }
    }
    
    return %ports;
}
sub get_port_variants {
    my $port = shift;
    my @variants;
    
    my $handle = FileHandle->new( "${VARIANTS_CMD} $port |" )
                 or die "${VARIANTS_CMD}: $!";
    
    # skip the first line - always an intro line
    <$handle>;
    
    my $variant_regexp = qr{
        ^
            \s+
            ( [^\s]+ )      # capture the port
            (?:             # optional description
                :
                \s+
                .*
            )?
        $
    }x;
    
    LINE:
    while ( my $line = <$handle> ) {
        # skip the common variants (they don't apply)
        next LINE if $line =~ m{ ^ \s+ darwin :? }x;
        next LINE if $line =~ m{ ^ \s+ universal :? }x;
        
        if ( $line =~ $variant_regexp ) {
            push @variants, $1;
        }
        else {
            die "Variants format error: $line";
        }
    }
    
    return @variants;
}
sub get_default_ports {
    my $handle = FileHandle->new( $DEFAULTS_FILE )
                 or die "${DEFAULTS_FILE}: $!";
    
    my $assignment_regexp = qr{
        ^
            \s*
            ( [A-Z0-9_]+ )  # key
            \s* = \s*
            (.*)?           # value
            \s*
        $
    }x;
    my $port_regexp = qr{
        ^
            ( [^\s]+ )      # applicable hosts
            \s+
            ( [^\s]+ )      # port
            (?:
                \s* (.*)?   # optional variants
            )?
            \s*
        $
    }x;
    my %assignments;
    my %ports;
    my @order;
    
    LINE:
    while ( my $line = <$handle> ) {
        # remove comments and skip blank linkes
        $line =~ s{ [#] .* $ }{}x;
        next LINE if $line =~ m{ ^ \s* $ }x;
        
        if ( $line =~ $assignment_regexp ) {
            $assignments{$1} = $2;
        }
        elsif ( $line =~ $port_regexp ) {
            my $hosts    = $1;
            my $port     = $2;
            my $variants = $3 || q();
            
            # replace assignments
            foreach my $key ( keys %assignments ) {
                my $value = $assignments{$key};
                $hosts =~ s{$key}{$value};
            }
            
            foreach my $host ( split /,/, $hosts ) {
                if ( $hostname eq $host  or  q(*) eq $host ) {
                    push @order, $port;
                    $ports{$port}{'install'} = 1;

                    foreach my $var ( split /\s+/, $variants ) {
                        $ports{$port}{'variants'}{$var} = 1;
                    }
                }
            }
        }
        else {
            die "File format error:\n$line";
        }
    }
    
    return \%ports, @order;
}



__END__

# TODO
#   *   examine installed ports and list those that aren't covered by
#       the default installation file
#   *   tag support to be able to install a subset of the default file


=head1 NAME

B<pinst> - MacPorts install helper

=head1 SYNOPSIS

B<pinst> [B<-c> I<file>] [B<-fn>] {B<-d> | I<port> [I<...>]}

B<pinst> -h

=head1 DESCRIPTION

Dependencies in MacPorts are automatically handled, so why write a dependency
wrapper program? Two reasons:

=over

=item 1.

sometimes MacPorts installs dependencies a little too aggressively L<mdash> 
for example, C<php5> requires C<gd> which, by default, installs C<XFree86>. 
I don't want all of X11 rebuilt just to get PHP.

=item 2.

by having a defaults file which lists required packages, I can reinstall
the packages I want as I set up a new OS X machine without having to remember
what they are.

=back

=head1 OPTIONS

=over

=item B<-h>

display the synopsis and exit

=item B<-c> I<file>

use I<file> as the defaults file

=item B<-d>

install the ports as specified in the defaults file

=item B<-f>

force dependencies even if it has variants

=back

=head1 DEFAULTS FILE

=head2 FILE LOCATION

The defaults file normally lives at F<~/etc/ports>, but can be changed
with the B<-c> argument or by setting the environment variable 
C<PINST_DEFAULTS>

=head2 FILE FORMAT

The defaults file is a simple text file. Comments are introduced with 
the normal hash symbol (#), anything from the symbol to the end of the line 
is ignored.

The file looks like this:

    # example config file:
    
    LAPTOPS=sinister,kittaghy       # laptops have identical config
    
    LAPTOPS         fortune
    *               perl5 +threads
    sinister        git-core

There are two types of entry in the file.

=head3 Package

Each package line contains:

=over

=item *

a comma-delimited list of hosts to which this package applies, which can 
include an assignment (see below), or an asterisk symbol (*) which means
the package applies to all hosts

=item *

the package name

=item *

an optional list of variants

=back

=head3 Assignments

An assigment is a line that has an uppercase word (which can also include
numerals and underscores), an equals sign and then a commaa-delimited list of
hostnames. This word can then be used in the package declarations instead of
repeating the same hostnames over and over.

=head1 AUTHOR

Mark Norman Francis <norm@cackhanded.net>
